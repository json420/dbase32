#!/usr/bin/python3

# dbase32: base32-encoding with a sorted-order alphabet (for databases)
# Copyright (C) 2013 Novacut Inc
#
# This file is part of `dbase32`.
#
# `dbase32` is free software: you can redistribute it and/or modify it under
# the terms of the GNU Lesser General Public License as published by the Free
# Software Foundation, either version 3 of the License, or (at your option) any
# later version.
#
# `dbase32` is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public License for more
# details.
#
# You should have received a copy of the GNU Lesser General Public License along
# with `dbase32`.  If not, see <http://www.gnu.org/licenses/>.
#
# Authors:
#   Jason Gerard DeRose <jderose@novacut.com>
#

"""
Benchmark the db32enc(), db32dec() C implementation.
"""

import timeit
import platform
import argparse

import dbase32


FAST = 2500 * 1000  # 2.5 million
SLOW =  500 * 1000  # 500k

parser = argparse.ArgumentParser()
parser.add_argument('--bytes', metavar='N', type=int,
    default=60,
    help='length of binary ID in bytes',
)
args = parser.parse_args()


setup = """
from os import urandom
from base64 import b64encode, b64decode

from dbase32 import db32enc, db32dec
from dbase32 import isdb32_p, isdb32_c
from dbase32 import check_db32_p, check_db32_c
from dbase32 import random_id_p, random_id_c

data = urandom({})
text_b64 = b64encode(data)
text_db32 = db32enc(data)
not_db32 = text_db32[:-1] + 'Z'

assert b64decode(text_b64) == data
assert db32dec(text_db32) == data

assert isdb32_p(text_db32) is True
assert isdb32_c(text_db32) is True
assert isdb32_p(not_db32) is False
assert isdb32_c(not_db32) is False
""".format(args.bytes)


def run(statement, slow=False):
    count = (SLOW if slow else FAST)
    t = timeit.Timer(statement, setup)
    elapsed = t.timeit(count)
    rate = int(count / elapsed)
    print('{:>14,}: {}'.format(rate, statement))

print('')

print('dbase32: {} ({} {})'.format(
    dbase32.__version__, platform.dist()[0], platform.dist()[1])
)
print('Python: {}, {}, {}'.format(
    platform.python_version(), platform.machine(), platform.system())
)
print('data size: {} bytes'.format(args.bytes))

print('Encodes/second:')
run('b64encode(data)')
run('db32enc(data)')

print('Decodes/second:')
run('b64decode(text_b64)')
run('db32dec(text_db32)')

print('Validations/second:')
run('isdb32_p(text_db32)', slow=True)
run('isdb32_c(text_db32)')
run('check_db32_p(text_db32)', slow=True)
run('check_db32_c(text_db32)')

print('Random IDs/second:')
run('urandom(15)', slow=True)
run('random_id_p(15)', slow=True)
run('random_id_c(15)', slow=True)

print('')

